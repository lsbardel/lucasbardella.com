{
  "version": 3,
  "sources": ["../../src/components/histogram.tsx"],
  "sourcesContent": ["import * as React from \"npm:react\";\nimport * as d3 from \"npm:d3\";\n\nexport default (notebook, el) => {\n  notebook\n    .require(\n      \"d3-selection\",\n      \"d3-transition\",\n      \"d3-scale\",\n      \"d3-array\",\n      \"d3-random\",\n      \"d3-scale\",\n      \"d3-timer\",\n      \"d3-scale-chromatic\",\n      \"d3-interpolate\"\n    )\n    .then((d3) => {\n      histogram(el, d3, 20, 15);\n    });\n};\n\nconst largestRectangle = (Height) => {\n  var stack = [],\n    max_area = 0,\n    area,\n    x1,\n    x2,\n    y;\n\n  Height.map((h, i) => {\n    while (stack.length && h < Height[stack[stack.length - 1]]) calc_area(i);\n    stack.push(i);\n  });\n\n  while (stack.length) calc_area(Height.length);\n\n  return [x1, x2, y];\n\n  function calc_area(i) {\n    var j = stack.splice(stack.length - 1);\n    var t = stack.length ? stack[stack.length - 1] + 1 : 0;\n    area = Height[j] * (i - t);\n    if (area > max_area) {\n      max_area = area;\n      y = Height[j];\n      x1 = t;\n      x2 = i;\n    }\n  }\n};\n\nexport const LargestHistogram = ({N, H}: {N: number, H: number}) => {\n  const el = React.useRef(null);\n  const setRef = (el) => {\n    if (el) {\n      histogram(el, N, H);\n    }\n  }\n  return <div ref={setRef} />;\n}\n\nconst histogram = (el, N, H) => {\n  const generateData = () => d3.range(0, N).map(d3.randomUniform(1, H - 2));\n  const color = d3.scaleSequential(d3.interpolateViridis).domain([0, H + 5]);\n  const areaColor = color(H + 5);\n  const animation = {};\n  let data = generateData();\n\n  const svg = d3.select(el).append(\"svg\");\n  const paper = svg.append(\"g\");\n  const area = svg.append(\"rect\").style(\"fill\", areaColor).style(\"fill-opacity\", 0.6);\n\n  const width = el.offsetWidth,\n    height = el.offsetHeight,\n    barWidth = width / data.length,\n    y = d3.scaleLinear().domain([0, H]).range([height, 0]);\n  svg.attr(\"width\", width).attr(\"height\", height);\n\n  paper\n    .selectAll(\"rect\")\n    .data(data)\n    .enter()\n    .append(\"rect\")\n    .attr(\"transform\", (d, i) => \"translate(\" + i * barWidth + \")\")\n    .attr(\"y\", y)\n    .attr(\"height\", (d) => height - y(d))\n    .attr(\"width\", barWidth - 1)\n    .attr(\"fill\", color)\n    .attr(\"stroke\", \"#fff\")\n    .attr(\"stroke-width\", 1)\n    .attr(\"stroke-linejoin\", \"round\");\n\n  paper.selectAll(\"rect\").call(update, data).call(animate, 2000);\n\n  function update(histogram, di) {\n    var ad = largestRectangle(di);\n\n    histogram\n      .data(di)\n      .attr(\"y\", function (d) {\n        return y(d);\n      })\n      .attr(\"height\", function (d) {\n        return height - y(d);\n      })\n      .attr(\"fill\", function (d) {\n        return color(d);\n      });\n\n    area\n      .attr(\"transform\", \"translate(\" + ad[0] * barWidth + \",\" + y(ad[2]) + \")\")\n      .attr(\"width\", barWidth * (ad[1] - ad[0]) - 1)\n      .attr(\"height\", height - y(ad[2]));\n  }\n\n  function animate(histogram, duration) {\n    var data1 = generateData(),\n      Ht = d3.interpolateArray(data, data1);\n\n    d3.select(animation)\n      .transition()\n      .duration(duration)\n      .tween(\"attr:y\", function () {\n        return function (t) {\n          update(histogram, Ht(t));\n        };\n      });\n\n    d3.timeout(function () {\n      data = data1;\n      animate(histogram, duration);\n    }, (Math.random() + 1) * duration);\n  }\n};\n"],
  "mappings": "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",
  "names": ["d3", "el", "histogram"]
}
